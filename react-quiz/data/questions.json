{
  "questions": [
    {
      "question": "Which is the most popular JavaScript framework?",
      "options": ["Angular", "React", "Svelte", "Vue"],
      "correctOption": 1,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "What is JSX in React?",
      "options": [
        "JavaScript XML",
        "JavaScript Code",
        "JSON Syntax",
        "JavaScript Syntax"
      ],
      "correctOption": 0,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "What function is used to create components in React?",
      "options": [
        "createComponent",
        "newComponent",
        "React.component()",
        "render()"
      ],
      "correctOption": 3,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "What lifecycle method is invoked after a component is mounted in React?",
      "options": [
        "componentDidMount",
        "componentDidUpdate",
        "componentWillMount",
        "componentWillUnmount"
      ],
      "correctOption": 0,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "How can you update the state of a component in React?",
      "options": [
        "Using setState()",
        "Using updateState()",
        "Using changeState()",
        "Using modifyState()"
      ],
      "correctOption": 0,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "What is the purpose of componentDidMount() in React",
      "options": [
        "It is used for rendering components.",
        "It is used for updating the state of components.",
        "It is used for performing actions after the component is mounted.",
        "It is used for handling user interactions."
      ],
      "correctOption": 2,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "Which company invented React?",
      "options": ["Google", "Apple", "Netflix", "Facebook"],
      "correctOption": 3,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "What is the virtual DOM in React",
      "options": [
        "A virtual representation of the browser's DOM",
        "A virtual representation of the component structure",
        "A virtual representation of the server's DOM",
        "A virtual representation of the application's state"
      ],
      "correctOption": 0,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "Which of the following is not a built-in hook in React?",
      "options": ["useEffect", "useFetch", "useState", "useContext"],
      "correctOption": 1,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "What is the purpose of the key attribute in React when rendering lists?",
      "options": [
        "It helps identify elements in the DOM.",
        "It helps with styling components.",
        "It helps with component performance.",
        "It helps with reconciliation in the virtual DOM."
      ],
      "correctOption": 3,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "What's the fundamental building block of React apps?",
      "options": ["Components", "Blocks", "Elements", "Effects"],
      "correctOption": 0,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "What is the purpose of state in React?",
      "options": [
        "To store data that can change over time",
        "To handle routing within the application",
        "To manage the application's configuration",
        "To handle the user interface layout"
      ],
      "correctOption": 0,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "What's the name of the syntax we use to describe the UI in React components?",
      "options": ["FBJ", "Babel", "JSX", "ES2015"],
      "correctOption": 2,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "What is the purpose of the shouldComponentUpdate method in React?",
      "options": [
        "To force an update to the component's state",
        "To determine if a component should be updated or not",
        "To handle errors during the rendering phase",
        "To perform cleanup operations before a component update"
      ],
      "correctOption": 1,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "Which of the following is true about the React framework?",
      "options": [
        "It uses a unidirectional data flow",
        "It is built on top of other frameworks",
        "It relies on two-way data binding",
        "It is primarily used for server-side rendering"
      ],
      "correctOption": 0,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "How can you conditionally render components in React?",
      "options": [
        "Using the if-else statement within JSX",
        "Using the switch statement within JSX",
        "Using the ternary operator within JSX",
        "Using the for loop within JSX"
      ],
      "correctOption": 2,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "Which component lifecycle method is invoked just before a component is removed from the DOM in React?",
      "options": [
        "componentWillUnmount",
        "componentCleanup",
        "removeComponent",
        "beforeDestroy"
      ],
      "correctOption": 0,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "What is the purpose of the useEffect hook in React?",
      "options": [
        "To perform actions after the component is mounted or updated",
        "To handle form submissions in a component",
        "To manage global state in the application",
        "To create custom events within the component"
      ],
      "correctOption": 0,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "How does data flow naturally in React apps?",
      "options": [
        "From parents to children",
        "From children to parents",
        "Both ways",
        "The developers decides"
      ],
      "correctOption": 0,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "How to pass data into a child component?",
      "options": ["State", "Props", "PropTypes", "Parameters"],
      "correctOption": 1,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "When to use derived state?",
      "options": [
        "Whenever the state should not trigger a re-render",
        "Whenever the state can be synchronized with an effect",
        "Whenever the state should be accessible to all components",
        "Whenever the state can be computed from another state variable"
      ],
      "correctOption": 3,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "What triggers a UI re-render in React?",
      "options": [
        "Running an effect",
        "Passing props",
        "Updating state",
        "Adding event listeners to DOM elements"
      ],
      "correctOption": 2,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "When do we directly \"touch\" the DOM in React?",
      "options": [
        "When we need to listen to an event",
        "When we need to change the UI",
        "When we need to add styles",
        "Almost never"
      ],
      "correctOption": 3,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "In what situation do we use a callback to update state?",
      "options": [
        "When updating the state will be slow",
        "When the updated state is very data-intensive",
        "When the state update should happen faster",
        "When the new state depends on the previous state"
      ],
      "correctOption": 3,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "If we pass a function to useState, when will that function be called?",
      "options": [
        "On each re-render",
        "Each time we update the state",
        "Only on the initial render",
        "The first time we update the state"
      ],
      "correctOption": 2,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "Which hook to use for an API request on the component's initial render?",
      "options": ["useState", "useEffect", "useRef", "useReducer"],
      "correctOption": 1,
      "points": 10,
      "difficulty": "easy"
    },
    {
      "question": "Which variables should go into the useEffect dependency array?",
      "options": [
        "Usually none",
        "All our state variables",
        "All state and props referenced in the effect",
        "All variables needed for clean up"
      ],
      "correctOption": 2,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "An effect will always run on the initial render.",
      "options": [
        "True",
        "It depends on the dependency array",
        "False",
        "In depends on the code in the effect"
      ],
      "correctOption": 0,
      "points": 30,
      "difficulty": "hard"
    },
    {
      "question": "When will an effect run if it doesn't have a dependency array?",
      "options": [
        "Only when the component mounts",
        "Only when the component unmounts",
        "The first time the component re-renders",
        "Each time the component is re-rendered"
      ],
      "correctOption": 3,
      "points": 20,
      "difficulty": "medium"
    },
    {
      "question": "What is the difference between controlled and uncontrolled components in React?",
      "options": [
        "Controlled components allow for better performance than uncontrolled components.",
        "Uncontrolled components use a local state, whereas controlled components do not.",
        "Controlled components store their own state internally, whereas uncontrolled components rely on parent components.",
        "Uncontrolled components store their own state internally, whereas controlled components rely on parent components."
      ],
      "correctOption": 3,
      "points": 30,
      "difficulty": "hard"
    }
  ]
}
